[BITS 16]                       ; We need 16-bit intructions for Real mode

[ORG 0x7C00]                    ; The BIOS loads the boot sector into memory location 0x7C00

jmp load_kernel   	        ; Load the OS Kernel

%include"/home/farhan/Desktop/myOS_UZI/uzi2/boot/gdt.inc"
  
load_kernel:
        jmp enter_pm            ; Enter Protected Mode
        

enter_pm:        
	call installGDT
        
;----------Entering Protected Mode----------;
                
        mov eax, cr0            ; Copy the contents of CR0 into EAX
        or eax, 1               ; Set bit 0 to enter pmode    (0xFE = Real Mode)
        mov cr0, eax            ; Copy the contents of EAX into CR0
        
	; each descriptor in gdt is 8 bytes long. so code descriptor is at 0x08 offset right after null descriptor
        jmp 08h:kernel_segments ; Jump to code segment, offset kernel_segments
        

[BITS 32]                       ; We now need 32-bit instructions
kernel_segments:
        mov ax, 10h             ; Save data segment identifyer
        mov ds, ax              ; Move a valid data segment into the data segment register
        mov ss, ax              ; Move a valid data segment into the stack segment register
        mov esp, 090000h        ; Move the stack pointer to 090000h
        
        jmp 08h:0x1000          ; Jump to section 08h (code), offset 01000h i.e jmp to our kernel main()
        

times 510-($-$$) db 0          ; Fill up the file with zeros

dw 0AA55h                       ; Boot sector identifyer
